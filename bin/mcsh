#!/bin/bash
#MCSH by Suda_Baka

EXTION=/mnt/us/extensions/mcsh
SWAP=/mnt/base-us/extensions/mcsh

if [ ! -f ${SWAP}/bin/swapfile ]; then
	echo "[-]Missing swapfile.
Set swapfile size.
1~80(M)     TO SMALL.
81~160(M)   THE BEST!SELECT IT PLZ!
161~240(M)  MAYBE IT IS GOOD.
>240(M)     TOO LARGE.DO NOT ADVICE.
If you don't know how to choose,enter "130"
**PLZ ENTER POSITIVE INGETER**"
	read -p 'Enter the size of swapfile:' size
	if expr ${size} + 1 >/dev/null 2>&1; then
		echo '[+]Creating.Please wait for a moment...'
		dd if=/dev/zero of=${SWAP}/bin/swapfile bs=1M count=${size}
		mkswap ${SWAP}/bin/swapfile
	else
		echo [x]Unknown enrty.
	fi
fi

icon()
{
	echo "__________________________________
 __    __   _____   _____  _    _ 
|  \  /  | / ____| / ____|| |  | |
|   \/   || |     | |__   | |__| |
| |\  /| || |      \___ \ |  __  |
| | \/ | || |____  ____) || |  | |
|_|    |_| \_____||_____/ |_|  |_|
__________________________________"
}

usage()
{
	echo -e "MCSH v1.3\n\n
Usage: mcsh [OPTIONS] [SERVER_NAME]\n
Create, manage and run Minecraft servers\n
OPTIONS:
-c                      Create a new server
-l                      Get list of your server
-e <SERVER_NAME>        Edit your server
-s <SERVER_NAME>        Start your server
-r <SERVER_NAME>        Remove your server
-v                      Get version of MCSH
-h                      Show this message
--ip                    View your IP adress
--reswap                Reset swapfile\n"
}

bag()
{
	clear
	echo "       EDIT MODE
—————————————————————————"
}

if [[ "$1" = "-h" || "$1" = "--help" ]]; then
	usage

elif [[ "$1" = "-s" || "$1" = "--start" ]]; then
	if [ -z "$2" ]; then
		echo [x]Null string.
		exit
	fi
	if [ -d ${EXTION}/bin/server/${2} ]; then
		echo Please wait.
		icon
		cd ${EXTION}/bin/server/${2}
		./start.sh
	else
		echo [x]Server not found.
	fi

elif [ "$1" = --ip ]; then
	echo "       WLAN IP
—————————————————————————
IP:`ifconfig wlan0 | grep 'inet addr' | awk -F '[ :]' '{print $13}'`"

elif [[ "$1" = "-e" || "$1" = "--edit" ]]; then
	if [ -z "$2" ]; then
		echo [x]Null string.
		exit
	fi
	if [ -d ${EXTION}/bin/server/${2} ]; then
		while true; do
		bag
			cd ${EXTION}/bin/server/${2}
			echo -e "-Server:${2}\n-Main\n—————————————————————————\n1|Enabled\n2|Disabled\n3|Other\n0|Exit"
			if [ "$smt" ]; then
				smd=$smt
				export smt=''
			else
				read -p Select: smd
			fi
			case $smd in
				1)
				while true; do
					bag
					echo -e "-Server:${2}\n-Enabled\n—————————————————————————\n†|Enabled"
					i=$(grep -n 'true' server.properties | sort -n)
					i=${i//:/>}
					echo -e "${i//=true/}\n2|Disabled\n0|Back"
					read -p "Select to swich:" line
					if [ "$line" = 0 ]; then
						break
					elif [ "$line" = 1 ]; then
						continue
					elif [ "$line" = 2 ]; then
						export smt=2
						break
					elif expr ${line} + 1 >/dev/null 2>&1; then
						item=$(sed -n ${line}p server.properties)
						sed -i "${line}c${item/true/false}" server.properties
					else
						echo [x]Unknown entry.
						sleep 1
					fi
				done ;;
				2)
				while true; do
					bag
					echo -e "-Server:${2}\n-Disabled\n—————————————————————————\n1|Enabled\n†|Disabled"
					i=$(grep -n 'false' server.properties | sort -n)
					i=${i//:/>}
					echo -e "${i//=false/}\n0|Back"
					read -p "Select to swich:" line
					if [ "$line" = 0 ]; then
						break
					elif [ "$line" = 2 ]; then
						continue
					elif [ "$line" = 1 ]; then
						export smt=1
						break
					elif expr ${line} + 1 >/dev/null 2>&1; then
						item=$(sed -n ${line}p server.properties)
						sed -i "${line}c${item/false/true}" server.properties
					else
						echo [x]Unknown entry.
						sleep 1
					fi
				done ;;
				3)
				while true; do
					bag
					difct=$(grep -n 'diffic' server.properties)
					viewd=$(grep -n 'distan' server.properties)
					max_p=$(grep -n 'max-players' server.properties)
					echo -e "-Server:${2}\n-Other\n—————————————————————————\n1|max-players         [${max_p##*=}]\n2|view-distance       [${viewd#*=}]\n3|difficulty          [${difct#*=}]\n0|Back"
					read -p Select: line
					case $line in
						1)
						bag
						echo -e "-Server:${2}\n-Max_Players\n—————————————————————————"
						read -p Enter: value
						if expr ${value} + 1 >/dev/null 2>&1; then
							sed -i "${max_p%:*}cmax-players=${value}" server.properties
							echo [+]Done.
							sleep 1
						else
							echo [x]Unknown entry.
							sleep 1
						fi ;;
						2)
						bag
						echo -e "-Server:${2}\n-View_Distance\n—————————————————————————"
						read -p Enter: value
						if expr ${value} + 1 >/dev/null 2>&1; then
							sed -i "${viewd%:*}cview-dis=${value}" server.properties
							echo [+]Done.
							sleep 1
						else
							echo [x]Unknown entry.
							sleep 1
						fi ;;
						3)
						bag
						echo -e "-Server:${2}\n-Difficulty\n—————————————————————————\n0-peaceful\n1-easy\n2-normal\n3-hard\n[0/1/2/3]"
						read -p Select: value
						if expr ${value} + 1 >/dev/null 2>&1; then
							sed -i "${difct%:*}cdifficulty=${value}" server.properties
							echo [+]Done.
							sleep 1
						else
							echo [x]Unknown entry.
							sleep 1
						fi ;;
						0)
						break ;;
						*)
						continue ;;
					esac
				done ;;
				0)
				break ;;
				*)
				continue ;;
			esac
		done
	else
		echo [x]Server not fount.
	fi

elif [[ "$1" = "-c" || "$1" = "--creat" ]]; then
	clear
	read -p 'Server name:' sn
	if [ -z "$sn" ]; then
		echo [x]Null string.
		exit
	fi
	if [ -d ${EXTION}/bin/server/${sn} ]; then
		echo [x]Server exists.
		exit
	fi
	echo "            SELECT VERSION
———————————————————————————————————————
 1|1.5         15|1.7.8       29|1.9.2
 2|1.5.1       16|1.7.9       30|1.9.3
 3|1.5.2       17|1.8         31|1.9.4
 4|1.6         18|1.8.1       32|1.10
 5|1.6.1       19|1.8.2       33|1.10.1
 6|1.6.2       20|1.8.3       34|1.10.2
 7|1.6.3       21|1.8.4       35|1.11
 8|1.6.4       22|1.8.5       36|1.11.1
 9|1.7.2       23|1.8.6       37|1.11.2
10|1.7.3       24|1.8.7       38|1.12
11|1.7.4       25|1.8.8       39|1.12.1
12|1.7.5       26|1.8.9       40|1.12.2
13|1.7.6       27|1.9
14|1.7.7       28|1.9.1
———————————————————————————————————————"
	read -p Select: ver
	if expr ${ver} + 1 >/dev/null 2>&1; then
		n=`expr ${ver} \* 2 + 1`
		if [[ "$n" -le 2 || "$n" -ge 82 ]]; then
			echo [x]Unknown entry.
		else
			mkdir ${EXTION}/bin/server/${sn}
			cd ${EXTION}/bin/server/${sn}
			echo [+]Downloading files.
			if [ "$n" -ge 77 ]; then
				wget https://launcher.mojang.com/v1/objects/02937d122c86ce73319ef9975b58896fc1b491d1/log4j2_112-116.xml
				log_file=112-116
			elif [[ "$n" -lt 77 && "$n" -ge 19 ]]; then
				wget https://launcher.mojang.com/v1/objects/dd2b723346a8dcd48e7f4d245f6bf09e98db9696/log4j2_17-111.xml
				log_file=17-111
			fi
			wget $(sed -n ${n}p ${EXTION}/bin/sul.list)
			echo [+]Done.
			cat > start.sh << _START_
#Server Launcher
echo Stopping useless tasks... 
sleep 1
stop tmd
stop webreader
stop cmd
stop demd
stop dpmd
stop appmgrd
stop perfd
stop stackdumpd
stop kb
stop contentpackd
stop pillow
stop todo
stop rcm
stop otav3
stop otaupd
stop dynconfig
stop lipcd
stop archive
sleep 1
sysctl -w net.ipv4.ip_forward=1
port=\$(grep 'port' server.properties)
iptables -A INPUT -i wlan0 -p tcp -m tcp --dport \${port##*=} -j ACCEPT
IP=\$(ifconfig wlan0 | grep 'inet addr' | awk -F '[ :]' '{print \$13}')
iptables -A FORWARD -p tcp -d \${IP} --dport \${port##*=} -j ACCEPT
echo IP:\${IP}
echo Port opened:\${port##*=}
swapon ${SWAP}/bin/swapfile
lipc-set-prop -i com.lab126.powerd preventScreenSaver 1
echo Your server is starting.
echo Your server will start in 10s.
${EXTION}/lib/jre/bin/java -jar -server -Xss1024k -Dlog4j.configurationFile=log4j2_${log_file}.xml server.jar nogui
echo Your server has stopped.Rebooting your kindle now.
sleep 8
reboot
_START_
			echo -e '#MOJANG EULA\neula=true' > eula.txt
		fi
	else
			echo [x]Unknown entry.
			sleep 1.5
	fi

elif [[ "$1" = "-l" || "$1" = "--list" ]]; then
	echo "      SERVER LIST
	—————————————————————————"
	ls ${EXTION}/bin/server

elif [[ "$1" = "-r" || "$1" = "--remove" ]]; then
	if [ -z "$2" ]; then
		echo [x]Null string.
		exit
	fi
	if [ ! -d ${EXTION}/bin/server/${2} ]; then
		echo [x]Unkonwn entry.
		exit
	fi
	read -p "Are you sure to remove "${2}"?[Y/N]" yn
	case $yn in
		y | Y)
		rm -rf ${EXTION}/bin/server/${2}
		echo [-]Server removed. ;;
		n | N)
		echo Stop. ;;
		*)
		echo [x]Unknown option. ;;
	esac


elif [[ "$1" = "-v" || "$1" = "--version" ]]; then
	icon
	echo "v1.4(2025.2.23)"

elif [ "$1" = "--reswap" ]; then
	rm ${SWAP}/bin/swapfile
	echo [-]Swapfile has been reset.
	sleep 2.5
	clear
	icon
	echo 'Enter "mcsh" to continue.'

elif [ "$1" = "--install" ]; then
	mntroot rw
	mv ${EXTION}/bin/mcsh /usr/bin
	chmod +x /usr/bin/mcsh
	mntroot ro

elif [ "$1" = "--unstall" ]; then
	read -p "Enter 'Y' to uninstall MCSH:" ao
	case $ao in
		y | Y)
		mntroot rw
		rm /usr/bin/mcsh
		mntroot ro
		rm -rf /mnt/us/extensions/mcsh
		exit ;;
		*)
		exit ;;
	esac

else
	icon
	echo 'Enter"mcsh -h"for more imformation.'
fi